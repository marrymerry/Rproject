plot(coauthornetwork.xls.graph,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
#--------------Vertex Relative----------
#set color of publications
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=2.5,vertex.label=0.5)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=publications.vertex.sizes.result,vertex.label=0.5)
#--------------End Vertex Relative----------
#set color of edge
plot(coauthornetwork.xls.graph,layout=times.set.layout,edge.color=times.color,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph, vertex.size=2,
vertex.color="green", vertex.frame.color="red", edge.color="grey",
edge.arrow.size=0.01, rescale=TRUE,vertex.label=NA, vertex.label.dist=0.0,
vertex.label.cex=0.5, add=FALSE,   vertex.label.font=.001)
dev.off()
ego.density = function(g)
{
l.ego.graphs              = graph.neighborhood(g,1)
ego.ecount                = sapply(l.ego.graphs, ecount)
ego.vcount                = sapply(l.ego.graphs, vcount)
ego.friend.count          = ego.vcount - 1
ego.friend.tie.count.max  = ego.friend.count*(ego.friend.count-1)/2
ego.friend.tie.count.real = ego.ecount - ego.friend.count
ego.density.result        =
ego.friend.tie.count.real/ego.friend.tie.count.max
return(ego.density.result)
}
ego.density(coauthornetwork.xls.graph)
library(plspm)
library(ggplot2)
library(reshape)
library(RColorBrewer)
library(plsdepot)
KMData <- read.csv("F:/R/JASISTProject/exportdata/346_346_2.csv")
library(plspm)
KMData_2 = KMData
dim(KMData_2)
attach(KMData_2)
Time5
summary(KMData_2[,1:2])
Gender.f = factor(Gender)
KMData_2$Gender_dummies = model.matrix(~Gender.f)
Education.f = factor(Education)
KMData_2$Educations_dummies = model.matrix(~Education.f)
Job.f = factor(Job)
KMData_2$Job_dummies = model.matrix(~Job.f)
#Build Model
PRN
#inner model
EC = rep(0,12)
VC = rep(0,12)
AC = rep(0,12)
KCI = rep(0,12)
CCC = rep(0,12)
KU = rep(0,12)
KSSE = rep(0,12)
PC = rep(0,12)
PRN = rep(0,12)
PRA = rep(0,12)
PAE = rep(0,12)
NAE = rep(0,12)
PRN
KCI[1] = 1
KCI[2] = 1
KCI[3] = 1
CCC[1] = 1
CCC[2] = 1
CCC[3] = 1
KU[1] = 1
KU[2] = 1
KU[3] = 1
KSSE[1]=1
PC[1]=1
PRN[2]=1
PRA[2]=1
PAE[3]=1
NAE[3]=1
model1_path = rbind(EC,VC,AC,KCI,CCC,KU,KSSE,PC,PRN,PRA,PAE,NAE)
model1_path
colnames(model1_path) = rownames(model1_path)
model1_path
innerplot(model1_path,box.size=0.05)
model1_blocks = list(c("KSSE1","KSSE2","KSSE3","PC1","PC2","PC3","PC4"),c("PRN1","PRN2","PRN3","PRN4","PRA1","PRA2","PRA3"),c("PAE1","PAE2","PAE3","PAE4","PAE5","PAE6","PAE7","PAE8","PAE9","NAE1","NAE2","NAE3","NAE4","NAE5","NAE6","NAE7","NAE8","NAE9","NAE10","NAE11","NAE12"),c("KCI1","KCI2","KCI3"),c("CCC1","CCC2","CCC3"),c("KU1","KU2","KU3"),c("KSSE1","KSSE2","KSSE3"),c("PC1","PC2","PC3","PC4"),c("PRN1","PRN2","PRN3","PRN4"),c("PRA1","PRA2","PRA3"),c("PAE1","PAE2","PAE3","PAE4","PAE5","PAE6","PAE7","PAE8","PAE9"),c("NAE1","NAE2","NAE3","NAE4","NAE5","NAE6","NAE7","NAE8","NAE9","NAE10","NAE11","NAE12"))
model1_blocks
model1_modes = rep("A",12)
model1_pls1 = plspm(KMData_2,model1_path,model1_blocks,modes=model1_modes)
plot(model1_pls1)
model1_pls1$path_coefs
model1_pls1$inner_model
model1_pls1$path_coefs
model1_pls1$inner_model
model1_pls1$inner_summary #AVE is reported
model1_pls1$gof
plot(model1_pls1, arr.pos = 0.35)
model1_pls1$unidim
plot(model1_pls1, what = "loadings")
#check outer model, loadings and cross-loadings
model1_pls1$outer_model
model1_pls1$crossloadings
install.packages("igraph")
install.packages("igraph")
help(lm)
#install.packages("igraph")
install.packages(""igraph")
install.packages
install.packages("igraph")
install.packages("igraph")
library(igraph)
coauthornetwork.xls <- read.csv("./exportdata/coauthornetwork.csv")
tail(coauthornetwork.xls)
#set graph class
coauthornetwork.xls.graph <- graph.data.frame(coauthornetwork.xls)
plot(coauthornetwork.xls.graph)
summary(coauthornetwork.xls.graph)
vcount(coauthornetwork.xls.graph)
ecount(coauthornetwork.xls.graph)
get.edge.attribute(coauthornetwork.xls.graph, 'times')
#set layout. different functions
times.set.layout <- layout.fruchterman.reingold(coauthornetwork.xls.graph)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", value=c(NA))
#get author attributes
authorattributes.xls <- read.csv("./exportdata/authorattributes.csv")
#set each author's attribute,
#publications record how many publications they publish
for (i in V(coauthornetwork.xls.graph)){
#set.vertex.attribute(graph, name, index=V(graph), value)
authorname.tmp <- V(coauthornetwork.xls.graph)[i]
#authorname.tmp$name get value
publication.value <- authorattributes.xls[authorattributes.xls$author==authorname.tmp$name,c('publications')]
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "publications", index=i, publication.value)
#set the vertex attribute name2, if publication > 10, set it name NOT NULL
if(publication.value >= 10)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", index=i,authorname.tmp$name )
}
#set times color, this is the about "edge", not attribute
times.color <- get.edge.attribute(coauthornetwork.xls.graph,"times")
colors = c('Grey', 'Red', 'Blue', 'Yellow', 'Green')
times.color[times.color > 4]  = colors[5]
times.color[times.color == 1] = colors[1]
times.color[times.color == 2] = colors[2]
times.color[times.color == 3] = colors[3]
times.color[times.color == 4] = colors[4]
#set publication color, this is the about  attribute "publications"
publications.color <- get.vertex.attribute(coauthornetwork.xls.graph,"publications")
colors = c('Red', 'Blue', 'Yellow','Grey')
publications.color.result <- c(rep(0,length(publications.color)))
publications.color.result[publications.color > 20]  = colors[1]
publications.color.result[(publications.color <= 20) & (publications.color > 10)]  = colors[2]
publications.color.result[(publications.color <= 10) & (publications.color > 5)]  = colors[3]
publications.color.result[publications.color <= 5]  = colors[4]
#now let's set the vertex size by publications
publications.vertex.sizes = get.vertex.attribute(coauthornetwork.xls.graph,"publications")
sizesused = c(5, 4, 3, 2)
publications.vertex.sizes.result <- c(rep(0,length(publications.vertex.sizes)))
publications.vertex.sizes.result[publications.vertex.sizes > 20]  = sizesused[1]
publications.vertex.sizes.result[(publications.vertex.sizes <= 20) & (publications.vertex.sizes > 10)]  = sizesused[2]
publications.vertex.sizes.result[(publications.vertex.sizes <= 10) & (publications.vertex.sizes > 5)]  = sizesused[3]
publications.vertex.sizes.result[publications.vertex.sizes <= 5]  = sizesused[4]
pdf("./exportdata/coauthor.pdf")
plot(coauthornetwork.xls.graph,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
#--------------Vertex Relative----------
#set color of publications
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=V(coauthornetwork.xls.graph)$name2,edge.arrow.size=.2,vertex.size=2.5,vertex.label=0.5) # please note, people who publish more than 10 papers are presented..
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=publications.vertex.sizes.result,vertex.label=0.5)
#--------------End Vertex Relative----------
#set color of edge
plot(coauthornetwork.xls.graph,layout=times.set.layout,edge.color=times.color,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph, vertex.size=2,
vertex.color="green", vertex.frame.color="red", edge.color="grey",
edge.arrow.size=0.01, rescale=TRUE,vertex.label=NA, vertex.label.dist=0.0,
vertex.label.cex=0.5, add=FALSE,   vertex.label.font=.001)
dev.off()
#let' calculate several features
#closeness
write.csv(closeness(coauthornetwork.xls.graph),"./exportdata/closeness.csv")
closeness(coauthornetwork.xls.graph, mode="in")
closeness(coauthornetwork.xls.graph, mode="out")
closeness(coauthornetwork.xls.graph, mode="all")
betweenness(coauthornetwork.xls.graph)
#let's calculate weak tie
ego.density(coauthornetwork.xls.graph)
ego.density = function(g)
{
l.ego.graphs              = graph.neighborhood(g,1)
ego.ecount                = sapply(l.ego.graphs, ecount)
ego.vcount                = sapply(l.ego.graphs, vcount)
ego.friend.count          = ego.vcount - 1
ego.friend.tie.count.max  = ego.friend.count*(ego.friend.count-1)/2
ego.friend.tie.count.real = ego.ecount - ego.friend.count
ego.density.result        =
ego.friend.tie.count.real/ego.friend.tie.count.max
return(ego.density.result)
}
View(authorattributes.xls)
View(coauthornetwork.xls)
View(times.set.layout)
View(ego.density)
source('E:/情报学研究生/网络计量研究/R语言/康乐乐 R语言入门 课程分享/康乐乐 R语言入门 课程分享/JASISTProject/iGraphDemo.R')
summary(coauthornetwork.xls.graph)
vcount(coauthornetwork.xls.graph)
ecount(coauthornetwork.xls.graph)
get.edge.attribute(coauthornetwork.xls.graph, 'times')
#set layout. different functions
times.set.layout <- layout.fruchterman.reingold(coauthornetwork.xls.graph)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", value=c(NA))
#get author attributes
authorattributes.xls <- read.csv("./exportdata/authorattributes.csv")
#set each author's attribute,
#publications record how many publications they publish
for (i in V(coauthornetwork.xls.graph)){
#set.vertex.attribute(graph, name, index=V(graph), value)
authorname.tmp <- V(coauthornetwork.xls.graph)[i]
#authorname.tmp$name get value
publication.value <- authorattributes.xls[authorattributes.xls$author==authorname.tmp$name,c('publications')]
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "publications", index=i, publication.value)
#set the vertex attribute name2, if publication > 10, set it name NOT NULL
if(publication.value >= 10)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", index=i,authorname.tmp$name )
}
#set times color, this is the about "edge", not attribute
times.color <- get.edge.attribute(coauthornetwork.xls.graph,"times")
colors = c('Grey', 'Red', 'Blue', 'Yellow', 'Green')
times.color[times.color > 4]  = colors[5]
times.color[times.color == 1] = colors[1]
times.color[times.color == 2] = colors[2]
times.color[times.color == 3] = colors[3]
times.color[times.color == 4] = colors[4]
#set publication color, this is the about  attribute "publications"
publications.color <- get.vertex.attribute(coauthornetwork.xls.graph,"publications")
colors = c('Red', 'Blue', 'Yellow','Grey')
publications.color.result <- c(rep(0,length(publications.color)))
publications.color.result[(publications.color <= 20) & (publications.color > 10)]  = colors[2]
publications.color.result[publications.color > 20]  = colors[1]
publications.color.result[(publications.color <= 10) & (publications.color > 5)]  = colors[3]
publications.color.result[publications.color <= 5]  = colors[4]
#now let's set the vertex size by publications
publications.vertex.sizes = get.vertex.attribute(coauthornetwork.xls.graph,"publications")
sizesused = c(5, 4, 3, 2)
publications.vertex.sizes.result <- c(rep(0,length(publications.vertex.sizes)))
publications.vertex.sizes.result[publications.vertex.sizes > 20]  = sizesused[1]
publications.vertex.sizes.result[(publications.vertex.sizes <= 20) & (publications.vertex.sizes > 10)]  = sizesused[2]
publications.vertex.sizes.result[(publications.vertex.sizes <= 10) & (publications.vertex.sizes > 5)]  = sizesused[3]
publications.vertex.sizes.result[publications.vertex.sizes <= 5]  = sizesused[4]
pdf("./exportdata/coauthor.pdf")
plot(coauthornetwork.xls.graph,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
#--------------Vertex Relative----------
#set color of publications
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=V(coauthornetwork.xls.graph)$name2,edge.arrow.size=.2,vertex.size=2.5,vertex.label=0.5) # please note, people who publish more than 10 papers are presented..
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=publications.vertex.sizes.result,vertex.label=0.5)
#--------------End Vertex Relative----------
#set color of edge
plot(coauthornetwork.xls.graph,layout=times.set.layout,edge.color=times.color,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph, vertex.size=2,
vertex.color="green", vertex.frame.color="red", edge.color="grey",
edge.arrow.size=0.01, rescale=TRUE,vertex.label=NA, vertex.label.dist=0.0,
vertex.label.cex=0.5, add=FALSE,   vertex.label.font=.001)
dev.off()
#let' calculate several features
#closeness
write.csv(closeness(coauthornetwork.xls.graph),"./exportdata/closeness.csv")
closeness(coauthornetwork.xls.graph, mode="in")
closeness(coauthornetwork.xls.graph, mode="out")
closeness(coauthornetwork.xls.graph, mode="all")
betweenness(coauthornetwork.xls.graph)
#let's calculate weak tie
ego.density(coauthornetwork.xls.graph)
ego.density = function(g)
{
l.ego.graphs              = graph.neighborhood(g,1)
ego.ecount                = sapply(l.ego.graphs, ecount)
ego.vcount                = sapply(l.ego.graphs, vcount)
ego.density.result        =
return(ego.density.result)
}
ego.friend.tie.count.real = ego.ecount - ego.friend.count
ego.friend.tie.count.real/ego.friend.tie.count.max
ego.friend.tie.count.max  = ego.friend.count*(ego.friend.count-1)/2
ego.friend.count          = ego.vcount - 1
#set layout. different functions
times.set.layout <- layout.fruchterman.reingold(coauthornetwork.xls.graph)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", value=c(NA))
#get author attributes
authorattributes.xls <- read.csv("./exportdata/authorattributes.csv")
#set each author's attribute,
#publications record how many publications they publish
for (i in V(coauthornetwork.xls.graph)){
#set.vertex.attribute(graph, name, index=V(graph), value)
authorname.tmp <- V(coauthornetwork.xls.graph)[i]
#authorname.tmp$name get value
publication.value <- authorattributes.xls[authorattributes.xls$author==authorname.tmp$name,c('publications')]
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "publications", index=i, publication.value)
#set the vertex attribute name2, if publication > 10, set it name NOT NULL
if(publication.value >= 10)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", index=i,authorname.tmp$name )
}
#set times color, this is the about "edge", not attribute
times.color <- get.edge.attribute(coauthornetwork.xls.graph,"times")
colors = c('Grey', 'Red', 'Blue', 'Yellow', 'Green')
times.color[times.color > 4]  = colors[5]
times.color[times.color == 1] = colors[1]
times.color[times.color == 2] = colors[2]
times.color[times.color == 3] = colors[3]
times.color[times.color == 4] = colors[4]
#set publication color, this is the about  attribute "publications"
publications.color <- get.vertex.attribute(coauthornetwork.xls.graph,"publications")
colors = c('Red', 'Blue', 'Yellow','Grey')
publications.color.result <- c(rep(0,length(publications.color)))
publications.color.result[publications.color > 20]  = colors[1]
publications.color.result[(publications.color <= 20) & (publications.color > 10)]  = colors[2]
publications.color.result[(publications.color <= 10) & (publications.color > 5)]  = colors[3]
publications.color.result[publications.color <= 5]  = colors[4]
#now let's set the vertex size by publications
publications.vertex.sizes = get.vertex.attribute(coauthornetwork.xls.graph,"publications")
sizesused = c(5, 4, 3, 2)
publications.vertex.sizes.result <- c(rep(0,length(publications.vertex.sizes)))
publications.vertex.sizes.result[publications.vertex.sizes > 20]  = sizesused[1]
publications.vertex.sizes.result[(publications.vertex.sizes <= 20) & (publications.vertex.sizes > 10)]  = sizesused[2]
publications.vertex.sizes.result[(publications.vertex.sizes <= 10) & (publications.vertex.sizes > 5)]  = sizesused[3]
publications.vertex.sizes.result[publications.vertex.sizes <= 5]  = sizesused[4]
pdf("./exportdata/coauthor.pdf")
plot(coauthornetwork.xls.graph,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
#--------------Vertex Relative----------
#set color of publications
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=V(coauthornetwork.xls.graph)$name2,edge.arrow.size=.2,vertex.size=2.5,vertex.label=0.5) # please note, people who publish more than 10 papers are presented..
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=publications.vertex.sizes.result,vertex.label=0.5)
#--------------End Vertex Relative----------
#set color of edge
plot(coauthornetwork.xls.graph,layout=times.set.layout,edge.color=times.color,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph, vertex.size=2,
vertex.color="green", vertex.frame.color="red", edge.color="grey",
edge.arrow.size=0.01, rescale=TRUE,vertex.label=NA, vertex.label.dist=0.0,
vertex.label.cex=0.5, add=FALSE,   vertex.label.font=.001)
dev.off()
#let' calculate several features
#closeness
write.csv(closeness(coauthornetwork.xls.graph),"./exportdata/closeness.csv")
closeness(coauthornetwork.xls.graph, mode="in")
closeness(coauthornetwork.xls.graph, mode="out")
closeness(coauthornetwork.xls.graph, mode="all")
betweenness(coauthornetwork.xls.graph)
#let's calculate weak tie
ego.density(coauthornetwork.xls.graph)
ego.density = function(g)
{
l.ego.graphs              = graph.neighborhood(g,1)
ego.ecount                = sapply(l.ego.graphs, ecount)
ego.vcount                = sapply(l.ego.graphs, vcount)
ego.friend.count          = ego.vcount - 1
ego.friend.tie.count.max  = ego.friend.count*(ego.friend.count-1)/2
ego.friend.tie.count.real = ego.ecount - ego.friend.count
ego.density.result        =
ego.friend.tie.count.real/ego.friend.tie.count.max
return(ego.density.result)
}
View(model1_path)
？igraph
help(igraph)
?summary
?vcount
help(vcount)
??vcount
coauthornetwork.xls <- read.csv("./exportdata/coauthornetwork.csv")
coauthornetwork.xls <- read.csv("./exportdata/coauthornetwork.csv")
coauthornetwork.xls <- read.csv("./exportdata/coauthornetwork.csv")
setwd("E:/情报学研究生/网络计量研究/R语言/康乐乐 R语言入门 课程分享/康乐乐 R语言入门 课程分享/JASISTProject")
coauthornetwork.xls <- read.csv("./exportdata/coauthornetwork.csv")
coauthornetwork.xls <- read.csv("./exportdata/coauthornetwork.csv")
setwd("E:/情报学研究生/网络计量研究/R语言/康乐乐 R语言入门 课程分享/康乐乐 R语言入门 课程分享/JASISTProject/exportdata")
coauthornetwork.xls <- read.csv("./exportdata/coauthornetwork.csv")
setwd("E:/情报学研究生/网络计量研究/R语言/康乐乐 R语言入门 课程分享/康乐乐 R语言入门 课程分享/JASISTProject")
coauthornetwork.xls.graph <- graph.data.frame(coauthornetwork.xls)
plot(coauthornetwork.xls.graph)
library(igraph)
tail(coauthornetwork.xls)
coauthornetwork.xls.graph <- graph.data.frame(coauthornetwork.xls)
plot(coauthornetwork.xls.graph)
summary(coauthornetwork.xls.graph)
vcount(coauthornetwork.xls.graph)
ecount(coauthornetwork.xls.graph)
get.edge.attribute(coauthornetwork.xls.graph, 'times')
#set layout. different functions
times.set.layout <- layout.fruchterman.reingold(coauthornetwork.xls.graph)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", value=c(NA))
authorattributes.xls <- read.csv("./exportdata/authorattributes.csv")
View(coauthornetwork.xls)
View(authorattributes.xls)
View(authorattributes.xls)
View(coauthornetwork.xls)
for (i in V(coauthornetwork.xls.graph)){
#set.vertex.attribute(graph, name, index=V(graph), value)
authorname.tmp <- V(coauthornetwork.xls.graph)[i]
#authorname.tmp$name get value
publication.value <- authorattributes.xls[authorattributes.xls$author==authorname.tmp$name,c('publications')]
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "publications", index=i, publication.value)
#set the vertex attribute name2, if publication > 10, set it name NOT NULL
if(publication.value >= 10)
coauthornetwork.xls.graph <- set.vertex.attribute(coauthornetwork.xls.graph, "name2", index=i,authorname.tmp$name )
}
View(coauthornetwork.xls)
View(authorattributes.xls)
View(KMData)
View(KMData_2)
View(times.set.layout)
times.color <- get.edge.attribute(coauthornetwork.xls.graph,"times")
colors = c('Grey', 'Red', 'Blue', 'Yellow', 'Green')
times.color[times.color > 4]  = colors[5]
times.color[times.color == 1] = colors[1]
times.color[times.color == 2] = colors[2]
times.color[times.color == 3] = colors[3]
times.color[times.color == 4] = colors[4]
#set publication color, this is the about  attribute "publications"
publications.color <- get.vertex.attribute(coauthornetwork.xls.graph,"publications")
colors = c('Red', 'Blue', 'Yellow','Grey')
publications.color.result <- c(rep(0,length(publications.color)))
publications.color.result[publications.color > 20]  = colors[1]
publications.color.result[(publications.color <= 20) & (publications.color > 10)]  = colors[2]
publications.color.result[(publications.color <= 10) & (publications.color > 5)]  = colors[3]
publications.color.result[publications.color <= 5]  = colors[4]
#now let's set the vertex size by publications
publications.vertex.sizes = get.vertex.attribute(coauthornetwork.xls.graph,"publications")
sizesused = c(5, 4, 3, 2)
publications.vertex.sizes.result <- c(rep(0,length(publications.vertex.sizes)))
publications.vertex.sizes.result[publications.vertex.sizes > 20]  = sizesused[1]
publications.vertex.sizes.result[(publications.vertex.sizes <= 20) & (publications.vertex.sizes > 10)]  = sizesused[2]
publications.vertex.sizes.result[(publications.vertex.sizes <= 10) & (publications.vertex.sizes > 5)]  = sizesused[3]
publications.vertex.sizes.result[publications.vertex.sizes <= 5]  = sizesused[4]
pdf("./exportdata/coauthor.pdf")
plot(coauthornetwork.xls.graph,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
#--------------Vertex Relative----------
#set color of publications
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=V(coauthornetwork.xls.graph)$name2,edge.arrow.size=.2,vertex.size=2.5,vertex.label=0.5) # please note, people who publish more than 10 papers are presented..
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=publications.vertex.sizes.result,vertex.label=0.5)
#--------------End Vertex Relative----------
#set color of edge
plot(coauthornetwork.xls.graph,layout=times.set.layout,edge.color=times.color,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph, vertex.size=2,
vertex.color="green", vertex.frame.color="red", edge.color="grey",
edge.arrow.size=0.01, rescale=TRUE,vertex.label=NA, vertex.label.dist=0.0,
vertex.label.cex=0.5, add=FALSE,   vertex.label.font=.001)
dev.off()
#let' calculate several features
#closeness
write.csv(closeness(coauthornetwork.xls.graph),"./exportdata/closeness.csv")
closeness(coauthornetwork.xls.graph, mode="in")
closeness(coauthornetwork.xls.graph, mode="out")
closeness(coauthornetwork.xls.graph, mode="all")
betweenness(coauthornetwork.xls.graph)
？closeness()
?closeness
write.csv(closeness(coauthornetwork.xls.graph),"./exportdata/closeness.csv")
closeness(coauthornetwork.xls.graph, mode="in")
closeness(coauthornetwork.xls.graph, mode="out")
betweenness(coauthornetwork.xls.graph)
?betweenness
ego.density(coauthornetwork.xls.graph)
ego.density = function(g)
{
l.ego.graphs              = graph.neighborhood(g,1)
ego.ecount                = sapply(l.ego.graphs, ecount)
ego.vcount                = sapply(l.ego.graphs, vcount)
ego.friend.count          = ego.vcount - 1
ego.friend.tie.count.max  = ego.friend.count*(ego.friend.count-1)/2
ego.friend.tie.count.real = ego.ecount - ego.friend.count
ego.density.result        =
ego.friend.tie.count.real/ego.friend.tie.count.max
return(ego.density.result)
}
ego.density(coauthornetwork.xls.graph)
?pdf
pdf("./exportdata/coauthor.pdf")
plot(coauthornetwork.xls.graph,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
#--------------Vertex Relative----------
#set color of publications
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=V(coauthornetwork.xls.graph)$name2,edge.arrow.size=.2,vertex.size=2.5,vertex.label=0.5) # please note, people who publish more than 10 papers are presented..
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=publications.vertex.sizes.result,vertex.label=0.5)
#--------------End Vertex Relative----------
#set color of edge
plot(coauthornetwork.xls.graph,layout=times.set.layout,edge.color=times.color,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph, vertex.size=2,
vertex.color="green", vertex.frame.color="red", edge.color="grey",
edge.arrow.size=0.01, rescale=TRUE,vertex.label=NA, vertex.label.dist=0.0,
vertex.label.cex=0.5, add=FALSE,   vertex.label.font=.001)
dev.off()
pdf("./exportdata/coauthor.pdf")
plot(coauthornetwork.xls.graph,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
#--------------Vertex Relative----------
#set color of publications
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=V(coauthornetwork.xls.graph)$name2,edge.arrow.size=.2,vertex.size=2.5,vertex.label=0.5) # please note, people who publish more than 10 papers are presented..
plot(coauthornetwork.xls.graph,layout=times.set.layout,vertex.color=publications.color.result,vertex.label=NA,edge.arrow.size=.2,vertex.size=publications.vertex.sizes.result,vertex.label=0.5)
#--------------End Vertex Relative----------
#set color of edge
plot(coauthornetwork.xls.graph,layout=times.set.layout,edge.color=times.color,vertex.label=NA,edge.arrow.size=.2,vertex.size=1,vertex.label=0.2)
plot(coauthornetwork.xls.graph, vertex.size=2,
vertex.color="green", vertex.frame.color="red", edge.color="grey",
edge.arrow.size=0.01, rescale=TRUE,vertex.label=NA, vertex.label.dist=0.0,
vertex.label.cex=0.5, add=FALSE,   vertex.label.font=.001)
dev.off()
x <- runif(50,0,2)
y <- runif(50,0,2)
plot(x, y, main="散点图", xlab="横坐标", ylab="纵坐标")
text(0.6,0.6,"text at (0.6,0.6)")
abline(h=.6,v=.6)
x <- rnorm(100) # 生成随机数
y <- rnorm(100) + x # 生成随机数
reg1 <- lm(x~y)
plot(x, y, main="Show Case")
abline(reg1)
